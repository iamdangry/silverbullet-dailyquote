{
  "version": 3,
  "sources": ["https://deno.land/x/silverbullet@0.8.2/lib/plugos/worker_runtime.ts", "https://deno.land/x/silverbullet@0.8.1/plug-api/syscalls/editor.ts", "https://deno.land/x/silverbullet@0.8.1/plug-api/syscall.ts", "daily-quote.ts", "ffb9a3976d6abd85.js"],
  "sourcesContent": ["// This is the runtime imported from the compiled plug worker code\nimport type { ControllerMessage, WorkerMessage } from \"./protocol.ts\";\nimport type { ProxyFetchRequest, ProxyFetchResponse } from \"../proxy_fetch.ts\";\n\ndeclare global {\n  function syscall(name: string, ...args: any[]): Promise<any>;\n}\n\n// Are we running in a (web) worker?\n\n// Determines if we're running in a web worker environment (Deno or browser)\n// - in a browser's main threads, typeof window is \"object\"\n// - in a browser's worker threads, typeof window === \"undefined\"\n// - in Deno's main thread typeof window === \"object\"\n// - in Deno's workers typeof window === \"undefined\n// - in Cloudflare workers typeof window === \"undefined\", but typeof globalThis.WebSocketPair is defined\nconst runningAsWebWorker = typeof window === \"undefined\" &&\n  // @ts-ignore: globalThis\n  typeof globalThis.WebSocketPair === \"undefined\";\n\n// console.log(\"Running as web worker:\", runningAsWebWorker);\n\nif (typeof Deno === \"undefined\") {\n  // @ts-ignore: Deno hack\n  self.Deno = {\n    args: [],\n    // @ts-ignore: Deno hack\n    build: {\n      arch: \"x86_64\",\n    },\n    env: {\n      // @ts-ignore: Deno hack\n      get() {\n      },\n    },\n  };\n}\n\nconst pendingRequests = new Map<\n  number,\n  {\n    resolve: (result: unknown) => void;\n    reject: (e: any) => void;\n  }\n>();\n\nlet syscallReqId = 0;\n\nfunction workerPostMessage(msg: ControllerMessage) {\n  self.postMessage(msg);\n}\n\nif (runningAsWebWorker) {\n  globalThis.syscall = async (name: string, ...args: any[]) => {\n    return await new Promise((resolve, reject) => {\n      syscallReqId++;\n      pendingRequests.set(syscallReqId, { resolve, reject });\n      workerPostMessage({\n        type: \"sys\",\n        id: syscallReqId,\n        name,\n        args,\n      });\n    });\n  };\n}\n\nexport function setupMessageListener(\n  // deno-lint-ignore ban-types\n  functionMapping: Record<string, Function>,\n  manifest: any,\n) {\n  if (!runningAsWebWorker) {\n    // Don't do any of this stuff if this is not a web worker\n    // This caters to the NoSandbox run mode\n    return;\n  }\n  self.addEventListener(\"message\", (event: { data: WorkerMessage }) => {\n    (async () => {\n      const data = event.data;\n      switch (data.type) {\n        case \"inv\":\n          {\n            const fn = functionMapping[data.name!];\n            if (!fn) {\n              throw new Error(`Function not loaded: ${data.name}`);\n            }\n            try {\n              const result = await Promise.resolve(fn(...(data.args || [])));\n              workerPostMessage({\n                type: \"invr\",\n                id: data.id,\n                result: result,\n              } as ControllerMessage);\n            } catch (e: any) {\n              console.error(\n                \"An exception was thrown as a result of invoking function\",\n                data.name,\n                \"error:\",\n                e.message,\n              );\n              workerPostMessage({\n                type: \"invr\",\n                id: data.id!,\n                error: e.message,\n              });\n            }\n          }\n          break;\n        case \"sysr\":\n          {\n            const syscallId = data.id;\n            const lookup = pendingRequests.get(syscallId);\n            if (!lookup) {\n              throw Error(\"Invalid request id\");\n            }\n            pendingRequests.delete(syscallId);\n            if (data.error) {\n              lookup.reject(new Error(data.error));\n            } else {\n              lookup.resolve(data.result);\n            }\n          }\n\n          break;\n      }\n    })().catch(console.error);\n  });\n  // Signal initialization with manifest\n  workerPostMessage({\n    type: \"manifest\",\n    manifest,\n  });\n}\n\nexport function base64Decode(s: string): Uint8Array {\n  const binString = atob(s);\n  const len = binString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binString.charCodeAt(i);\n  }\n  return bytes;\n}\n\nexport function base64Encode(buffer: Uint8Array | string): string {\n  if (typeof buffer === \"string\") {\n    buffer = new TextEncoder().encode(buffer);\n  }\n  let binary = \"\";\n  const len = buffer.byteLength;\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(buffer[i]);\n  }\n  return btoa(binary);\n}\n\nexport async function sandboxFetch(\n  reqInfo: RequestInfo,\n  options?: ProxyFetchRequest,\n): Promise<ProxyFetchResponse> {\n  if (typeof reqInfo !== \"string\") {\n    const body = new Uint8Array(await reqInfo.arrayBuffer());\n    const encodedBody = body.length > 0 ? base64Encode(body) : undefined;\n    options = {\n      method: reqInfo.method,\n      headers: Object.fromEntries(reqInfo.headers.entries()),\n      base64Body: encodedBody,\n    };\n    reqInfo = reqInfo.url;\n  }\n  return syscall(\"sandboxFetch.fetch\", reqInfo, options);\n}\n\n// @ts-ignore: monkey patching fetch\nglobalThis.nativeFetch = globalThis.fetch;\n// Monkey patch fetch()\nexport function monkeyPatchFetch() {\n  // @ts-ignore: monkey patching fetch\n  globalThis.fetch = async function (\n    reqInfo: RequestInfo,\n    init?: RequestInit,\n  ): Promise<Response> {\n    const encodedBody = init && init.body\n      ? base64Encode(\n        new Uint8Array(await (new Response(init.body)).arrayBuffer()),\n      )\n      : undefined;\n    const r = await sandboxFetch(\n      reqInfo,\n      init && {\n        method: init.method,\n        headers: init.headers as Record<string, string>,\n        base64Body: encodedBody,\n      },\n    );\n    return new Response(r.base64Body ? base64Decode(r.base64Body) : null, {\n      status: r.status,\n      headers: r.headers,\n    });\n  };\n}\n\nif (runningAsWebWorker) {\n  monkeyPatchFetch();\n}\n", "import { UploadFile } from \"../types.ts\";\nimport { syscall } from \"../syscall.ts\";\nimport type { PageRef } from \"../lib/page_ref.ts\";\nimport type { FilterOption } from \"../../lib/web.ts\";\n\nexport function getCurrentPage(): Promise<string> {\n  return syscall(\"editor.getCurrentPage\");\n}\n\nexport function setPage(newName: string): Promise<void> {\n  return syscall(\"editor.setPage\", newName);\n}\n\nexport function getText(): Promise<string> {\n  return syscall(\"editor.getText\");\n}\n\n/**\n * This updates the editor text, but in a minimal-diff way:\n * it compares the current editor text with the new text, and only sends the changes to the editor, thereby preserving cursor location\n */\nexport function setText(newText: string) {\n  return syscall(\"editor.setText\", newText);\n}\n\nexport function getCursor(): Promise<number> {\n  return syscall(\"editor.getCursor\");\n}\n\nexport function getSelection(): Promise<{ from: number; to: number }> {\n  return syscall(\"editor.getSelection\");\n}\n\nexport function setSelection(from: number, to: number): Promise<void> {\n  return syscall(\"editor.setSelection\", from, to);\n}\n\nexport function save(): Promise<void> {\n  return syscall(\"editor.save\");\n}\n\nexport function navigate(\n  pageRef: PageRef,\n  replaceState = false,\n  newWindow = false,\n): Promise<void> {\n  return syscall(\"editor.navigate\", pageRef, replaceState, newWindow);\n}\n\nexport function openPageNavigator(\n  mode: \"page\" | \"meta\" = \"page\",\n): Promise<void> {\n  return syscall(\"editor.openPageNavigator\", mode);\n}\n\nexport function openCommandPalette(): Promise<void> {\n  return syscall(\"editor.openCommandPalette\");\n}\n\nexport function reloadPage(): Promise<void> {\n  return syscall(\"editor.reloadPage\");\n}\n\nexport function reloadUI(): Promise<void> {\n  return syscall(\"editor.reloadUI\");\n}\n\nexport function reloadSettingsAndCommands(): Promise<void> {\n  return syscall(\"editor.reloadSettingsAndCommands\");\n}\n\nexport function openUrl(url: string, existingWindow = false): Promise<void> {\n  return syscall(\"editor.openUrl\", url, existingWindow);\n}\n\n/**\n * This is calling the `go()` method from the History Web API.\n * @param delta Position in history to move to relative to the current page,\n * where a negative value moves backwards, and positive forwards\n */\nexport function goHistory(delta: number): Promise<void> {\n  return syscall(\"editor.goHistory\", delta);\n}\n\n// Force the client to download the file in dataUrl with filename as file name\nexport function downloadFile(filename: string, dataUrl: string): Promise<void> {\n  return syscall(\"editor.downloadFile\", filename, dataUrl);\n}\n\nexport function uploadFile(\n  accept?: string,\n  capture?: string,\n): Promise<UploadFile> {\n  return syscall(\"editor.uploadFile\", accept, capture);\n}\n\nexport function flashNotification(\n  message: string,\n  type: \"info\" | \"error\" = \"info\",\n): Promise<void> {\n  return syscall(\"editor.flashNotification\", message, type);\n}\n\nexport function filterBox(\n  label: string,\n  options: FilterOption[],\n  helpText = \"\",\n  placeHolder = \"\",\n): Promise<FilterOption | undefined> {\n  return syscall(\"editor.filterBox\", label, options, helpText, placeHolder);\n}\n\nexport function showPanel(\n  id: \"lhs\" | \"rhs\" | \"bhs\" | \"modal\",\n  mode: number,\n  html: string,\n  script = \"\",\n): Promise<void> {\n  return syscall(\"editor.showPanel\", id, mode, html, script);\n}\n\nexport function hidePanel(\n  id: \"lhs\" | \"rhs\" | \"bhs\" | \"modal\",\n): Promise<void> {\n  return syscall(\"editor.hidePanel\", id);\n}\n\nexport function insertAtPos(text: string, pos: number): Promise<void> {\n  return syscall(\"editor.insertAtPos\", text, pos);\n}\n\nexport function replaceRange(\n  from: number,\n  to: number,\n  text: string,\n): Promise<void> {\n  return syscall(\"editor.replaceRange\", from, to, text);\n}\n\nexport function moveCursor(pos: number, center = false): Promise<void> {\n  return syscall(\"editor.moveCursor\", pos, center);\n}\n\nexport function insertAtCursor(text: string): Promise<void> {\n  return syscall(\"editor.insertAtCursor\", text);\n}\n\nexport function dispatch(change: any): Promise<void> {\n  return syscall(\"editor.dispatch\", change);\n}\n\nexport function prompt(\n  message: string,\n  defaultValue = \"\",\n): Promise<string | undefined> {\n  return syscall(\"editor.prompt\", message, defaultValue);\n}\n\nexport function confirm(\n  message: string,\n): Promise<boolean> {\n  return syscall(\"editor.confirm\", message);\n}\nexport function getUiOption(key: string): Promise<any> {\n  return syscall(\"editor.getUiOption\", key);\n}\n\nexport function setUiOption(key: string, value: any): Promise<void> {\n  return syscall(\"editor.setUiOption\", key, value);\n}\n\n// Vim specific\nexport function vimEx(exCommand: string): Promise<any> {\n  return syscall(\"editor.vimEx\", exCommand);\n}\n\n// Folding\nexport function fold() {\n  return syscall(\"editor.fold\");\n}\n\nexport function unfold() {\n  return syscall(\"editor.unfold\");\n}\n\nexport function toggleFold() {\n  return syscall(\"editor.toggleFold\");\n}\n\nexport function foldAll() {\n  return syscall(\"editor.foldAll\");\n}\n\nexport function unfoldAll() {\n  return syscall(\"editor.unfoldAll\");\n}\n\n// Undo/redo\nexport function undo() {\n  return syscall(\"editor.undo\");\n}\n\nexport function redo() {\n  return syscall(\"editor.redo\");\n}\n\nexport function openSearchPanel() {\n  return syscall(\"editor.openSearchPanel\");\n}\n\nexport function copyToClipboard(data: string | Blob): Promise<void> {\n  return syscall(\"editor.copyToClipboard\", data);\n}\n\nexport function deleteLine() {\n  return syscall(\"editor.deleteLine\");\n}\n", "declare global {\n  function syscall(name: string, ...args: any[]): Promise<any>;\n}\n\n// This is the case when running tests only, so giving it a dummy syscall function\nif (typeof self === \"undefined\") {\n  // @ts-ignore: test\n  // deno-lint-ignore no-global-assign\n  self = {\n    syscall: () => {\n      throw new Error(\"Not implemented here\");\n    },\n  };\n}\n\nexport const syscall = globalThis.syscall;\n", "import { editor } from \"$sb/syscalls.ts\";\r\n\r\nexport async function dailyQuote() {\r\n  const quoteAPI = \"https://api.quotable.io/quotes/random\";\r\n  const response = await fetch(quoteAPI);\r\n\r\n  if(!response.ok) {\r\n    throw new Error('Failed to fetch quote');\r\n    await editor.flashNotification(\"Failed to fetch quote\", \"error\");\r\n  }\r\n\r\n  const data = await response.json();\r\n  const quoteData = Array.isArray(data) ? data[0] : data;\r\n\r\n  if (quoteData.content && quoteData.author) {\r\n    await editor.flashNotification(\"Fetched Quote Successfully!\", \"info\");\r\n    const quote = quoteData.content;\r\n    const author = quoteData.author;\r\n    const formattedQuote = `${quote}\\n> \u2014 ${author}`;\r\n    // return formattedQuote;\r\n    await editor.insertAtCursor(\r\n      formattedQuote\r\n    );\r\n  } else {\r\n    throw new Error('No quote in response');\r\n  }\r\n}", "\nimport { setupMessageListener } from \"https://deno.land/x/silverbullet@0.8.2/lib/plugos/worker_runtime.ts\";\n\n// Imports\nimport {dailyQuote as dailyQuote} from \"file://E:\\\\Repos\\\\silverbullet-dailyquote\\\\daily-quote.ts\";\n\n\n// Function mapping\nconst functionMapping = {\n  dailyQuote: dailyQuote,\n\n};\n\n// Manifest\nconst manifest = {\n  \"name\": \"Daily-Quote\",\n  \"requiredPermissions\": [\n    \"fetch\"\n  ],\n  \"functions\": {\n    \"dailyQuote\": {\n      \"path\": \"daily-quote.ts:dailyQuote\",\n      \"command\": {\n        \"name\": \"Daily Quote: Fetch\"\n      }\n    }\n  },\n  \"assets\": {}\n};\n\nexport const plug = {manifest, functionMapping};\n\nsetupMessageListener(functionMapping, manifest);\n"],
  "mappings": "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",
  "names": ["functionMapping", "manifest", "syscall", "syscall"]
}
